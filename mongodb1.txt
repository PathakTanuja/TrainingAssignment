//find document with condition  used 
$gt --- greater than
$lt  -- less than
$gte -- greater than equal
$lte --- less than equal
$ne --- not equal

 db.collectionname.find( { fieldname : { condition } })

customerdb> db.kyc_user.find( {  age : { $gt:30 } } )          // age is greater than 30

[
  {
    _id: ObjectId("646b1f7be2be17a1881d5740"),
    name: 'Sita',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5741"),
    name: 'Radha',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5745"),
    name: 'Rahul',
    age: 35,
    address: 'pune',
    contact: 98654344466,
    gender: 'female'
  }
]



customerdb> db.kyc_user.find( {  age : { $lt:30 } } )	// age is less than 30

[
  {
    _id: ObjectId("646b1d8be2be17a1881d573f"),
    name: 'Jay',
    age: 20,
    address: 'pune',
    contact: 9865434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5742"),
    name: 'Mark',
    age: 18,
    address: 'delhi',
    contact: 9885434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5744"),
    name: 'Yogesh',
    age: 26,
    address: 'Delhi',
    contact: 8165434666,
    gender: 'male'
  }
]

customerdb> db.kyc_user.find( {  age : { $lte:30 } } ).pretty()          //less than equal 
[
  {
    _id: ObjectId("646b1d8be2be17a1881d573f"),
    name: 'Jay',
    age: 20,
    address: 'pune',
    contact: 9865434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5742"),
    name: 'Mark',
    age: 18,
    address: 'delhi',
    contact: 9885434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5743"),
    name: 'Jaya',
    age: 30,
    address: 'mumbai',
    contact: 9865434660,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5744"),
    name: 'Yogesh',
    age: 26,
    address: 'Delhi',
    contact: 8165434666,
    gender: 'male'
  }
]


customerdb> db.kyc_user.find( {  age : { $gte:30 } } ).pretty()     // greater than equal to   $ gte
[
  {
    _id: ObjectId("646b1f7be2be17a1881d5740"),
    name: 'Sita',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5741"),
    name: 'Radha',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5743"),
    name: 'Jaya',
    age: 30,
    address: 'mumbai',
    contact: 9865434660,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5745"),
    name: 'Rahul',
    age: 35,
    address: 'pune',
    contact: 98654344466,
    gender: 'female'
  }
]

customerdb> db.kyc_user.find( {  age : { $ne:35 } } ).pretty()   //  $ne not equal 


// Distinct data

customerdb> db.kyc_user.distinct("address")
[ 'delhi', 'mumbai', 'pune' ]

//Projection  
Selecting only necessary data rather than selecting whole of the data of a document

customerdb> db.kyc_user.find( { }, { "name" : 1} )
[
  { _id: ObjectId("646b1d8be2be17a1881d573f"), name: 'Jay' },
  { _id: ObjectId("646b1f7be2be17a1881d5740"), name: 'Sita' },
  { _id: ObjectId("646b2050e2be17a1881d5741"), name: 'Radha' },
  { _id: ObjectId("646b2050e2be17a1881d5742"), name: 'Mark' },
  { _id: ObjectId("646b2050e2be17a1881d5743"), name: 'Jaya' },
  { _id: ObjectId("646b2050e2be17a1881d5745"), name: 'Renuka' }
]

//using limit()  to fetch data

customerdb> db.kyc_user.find( { }, { "name" : 1  , "age" :1  } ).limit(2)   // fetching only two record
[
  { _id: ObjectId("646b1d8be2be17a1881d573f"), name: 'Jay', age: 20 },
  { _id: ObjectId("646b1f7be2be17a1881d5740"), name: 'Sita', age: 35 }
]


customerdb> db.kyc_user.find()
[
  {
    _id: ObjectId("646b1d8be2be17a1881d573f"),
    name: 'Jay',
    age: 20,
    address: 'pune',
    contact: 9865434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b1f7be2be17a1881d5740"),
    name: 'Sita',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5741"),
    name: 'Radha',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5742"),
    name: 'Mark',
    age: 18,
    address: 'delhi',
    contact: 9885434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5743"),
    name: 'Jaya',
    age: 30,
    address: 'mumbai',
    contact: 9865434660,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5745"),
    name: 'Renuka',
    age: 35,
    address: 'pune',
    contact: 98654344466,
    gender: 'female'
  }
]

db.collectionname.find( {}, { “fieldname”: 1, “fieldname” :1 }).skip(how many document skip).limit(how many document show) )

customerdb> db.kyc_user.find( { }, { "name" : 1  , "age" :1  } ).skip(3).limit(2)  // skip first 3 document and show 2 document
[
  { _id: ObjectId("646b2050e2be17a1881d5742"), name: 'Mark', age: 18 },
  { _id: ObjectId("646b2050e2be17a1881d5743"), name: 'Jaya', age: 30 }
]

db.collectionname.find().sort( {“fieldname”: 1})  // sorting perform in Ascending order according to field 


customerdb> db.kyc_user.find().sort( { "age":1} )
[
  {
    _id: ObjectId("646b2050e2be17a1881d5742"),
    name: 'Mark',
    age: 18,
    address: 'delhi',
    contact: 9885434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b1d8be2be17a1881d573f"),
    name: 'Jay',
    age: 20,
    address: 'pune',
    contact: 9865434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5743"),
    name: 'Jaya',
    age: 30,
    address: 'mumbai',
    contact: 9865434660,
    gender: 'female'
  },
  {
    _id: ObjectId("646b1f7be2be17a1881d5740"),
    name: 'Sita',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5741"),
    name: 'Radha',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5745"),
    name: 'Renuka',
    age: 35,
    address: 'pune',
    contact: 98654344466,
    gender: 'female'
  }
]


db.collectionname.find().sort( {“fieldname”: -1})   // sorting perform in  Descending order according to field value
customerdb> db.kyc_user.find().sort( { "age":-1} )  
[
  {
    _id: ObjectId("646b1f7be2be17a1881d5740"),
    name: 'Sita',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5741"),
    name: 'Radha',
    age: 35,
    address: 'pune',
    contact: 9865478666,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5745"),
    name: 'Renuka',
    age: 35,
    address: 'pune',
    contact: 98654344466,
    gender: 'female'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5743"),
    name: 'Jaya',
    age: 30,
    address: 'mumbai',
    contact: 9865434660,
    gender: 'female'
  },
  {
    _id: ObjectId("646b1d8be2be17a1881d573f"),
    name: 'Jay',
    age: 20,
    address: 'pune',
    contact: 9865434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5742"),
    name: 'Mark',
    age: 18,
    address: 'delhi',
    contact: 9885434666,
    gender: 'male'
  }
]

//Indexing

 db.collectionname.createIndex({field : 1 or -1}) // to create Indexing
// type is 1 for Ascending  and -1 for Descending
db.kyc_user.createIndex({name : 1})

  db.collectionname.getIndexes()     // to show the index in collection
  
 db.kyc_user.getIndexes() 

   db.collectionname.dropIndex({field: type})  // to delete index

db.kyc_user.dropIndex({name : 1})

//Compound Index  holds a refrence to multiple fields of collection
    db.kyc_user.createIndex({field1 : type, field2: type})  //to create mutiple indexes

        db.kyc_user.createIndex({name : 1, age: -1})


  //Aggregation
  Aggregation is the process of selecting data from a collection in MongoDB. It processes multiple documents and returns computed results.
Use aggregation to group values from multiple documents, or perform operations on the grouped data to return a single result.

  db.collectionname.aggregate( [ {$stage : {expression , {accumulator}}}])
Stages: Each stage starts from stage operators which are:
$match: It is used for filtering the documents can reduce the amount of documents that are given as input to the next stage.The $match stage is usually the first stage to select only the matching documents from a collection. It is equivalent to the Find
$project: It is used to select some specific fields from a collection.
$group: It is used to group documents based on some value.
$sort: It is used to sort the document that is rearranging them
$skip: It is used to skip n number of documents and passes the remaining documents
$limit: It is used to pass first n number of documents thus limiting them.


Accumulators: These are basically used in the group stage
sum: It sums numeric values for the documents in each group
count: It counts total numbers of documents
avg: It calculates the average of all given values from all documents
min: It gets the minimum value from all the documents
max: It gets the maximum value from all the documents
first: It gets the first document from the grouping
last: It gets the last document from the grouping

  customerdb> db.kyc_user.aggregate( [{$match: {gender: 'male'}}])
[
  {
    _id: ObjectId("646b1d8be2be17a1881d573f"),
    name: 'Jay',
    age: 20,
    address: 'pune',
    contact: 9865434666,
    gender: 'male'
  },
  {
    _id: ObjectId("646b2050e2be17a1881d5742"),
    name: 'Mark',
    age: 18,
    address: 'delhi',
    contact: 9885434666,
    gender: 'male'
  }
]

customerdb> db.kyc_user.aggregate([{$group:{_id:'$gender'}}])
[ { _id: 'female' }, { _id: 'male' } ]

customerdb> db.kyc_user.aggregate([{$group:{_id:'$gender', total: {$sum:1}}}])
[ { _id: 'male', total: 2 }, { _id: 'female', total: 4 } ]
db.kyc_user.aggregate([{$match:{gender:'female'}}])

